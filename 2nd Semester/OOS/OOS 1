
#include <ctime>
#include <iostream>
#include <string>

using namespace std;

// Aufzählungstyp für wählbare Objekte
// STEIN - 0, SCHERE - 1, PAPIER - 2
enum class Object { ROCK, SCISSORS, PAPER };

// Aufzählungstyp für mögliche Spielausgänge
enum class Result { PLAYER_ONE_WINS, PLAYER_TWO_WINS, DRAW };

// Struktur für einen Spieler bestehend aus Name und Wahl des Spielers
struct Player {
  string name;
  Object choice;
};

// Name des Spielers eingeben
string insert_name() {
  string name;
  // HIER programmieren:
  cout << "Name des Spielers: ";
  // Den Namen des Spielers von der Konsole einlesen und zurückgeben
  getline(cin, name);
  return name;
  // Tip: für das Einlesen eines Strings gibt es eine bestimmte Funktion, siehe
  // auch     Vorlesung Folie "Eine Zeile als String einlesen"
}

Object determine_choice(string choice) {
  if (choice.compare("CoderunnerTestValueROCK") == 0) {
    return Object::ROCK;
  } else if (choice.compare("CoderunnerTestValueSCISSORS") == 0) {
    return Object::SCISSORS;
  } else if (choice.compare("CoderunnerTestValuePAPER") == 0) {
    return Object::PAPER;
  } else {
    // Den Computer zufällig waehlen lassen.

    // HIER beantworten Sie folgende Fragen:
    // Was bewirkt die funktion srand?
    // Warum wird hier die Zeit (time) als Eingabe für die Funktion srand
    // verwendet? Wie funktioniert die funktion rand? A: Warum wird hier modulo
    // 3 verwendet? A: Damit man mit den 3 auswahlmöglichkeiten einen Rest
    // erzeugt.

    srand(static_cast<int>(time(nullptr)));
    int choice = rand() % 3;
    return static_cast<Object>(choice);
  }
}
// Die Wahl von Stein etc. als String zurückgeben lassen
string get_name(Object object) {
  switch (object) {
  case Object::PAPER:
    return "Papier";
  case Object::ROCK:
    return "Stein";
  default:
    return "Schere";
  }
  // z.B: Wenn Object dem Wert Object::ROCK entspricht, dann String "Stein"
  // zurückgeben
}

// Einen Text mit dem Namen des Spielers und seiner Wahl ausgeben
void print_choice(Player player) {

  // HIER programmieren:
  cout << player.name << " hat das Objekt " << get_name(player.choice)
       << " gewählt" << endl;
  // Auf der Konsole ausgeben, für welches Object sich der Spieler entschieden
  // hat. z.B.: "Computer hat das Object Schere gewählt" TIP: Nutzen sie hierzu
  // die Funktion get_name
}

// Die Wahl des Spielers abfragen
Object choose() {

  int choice;
  // HIER programmieren:
  // Die Wahl des Spielers von der Konsole einlesen und zurückgeben
  do {
    cout << "Bitte Objektwahl eingeben (1 = Stein, 2 = Schere, 3 = Papier): ";
    cin >> choice;

  } while (choice < 1 || choice > 3);

  return static_cast<Object>(choice - 1);
  // Stellen sie sicher, dass es sich um eine gültige Wahl handelt!
  // TIP: Nutzen Sie dazu eine geeignete Schleife. Siehe auch Vorlesung Folie
  // "Annehmende Schleifenanweisungen – Do"
}

Result determine_result(Player player_1, Player player_2) {

  int result =
      static_cast<int>(player_1.choice) - static_cast<int>(player_2.choice);
  // HIER programmieren:
  if (result == 2 || result == -1) {
    return Result::PLAYER_ONE_WINS;
  } else if (result == -2 || result == 1) {
    return Result::PLAYER_TWO_WINS;
  } else {
    return Result::DRAW;
  }
  // p1-p2
  // 0 => beide haben gleich unentschieden
  // 1 || -2 => p2
  // 2 || -1 => p1
  // Vergleichen Sie die gewählten Objekte, ermitteln sie das Spielergebnis und
  // geben sie es zurück. TIP: Wenn Sie für den Vergleich mit ganzene Zahlen
  // _rechnen_ wollen, dann nutzen sie den static_cast, siehe auch Vorlesung
  // Folie "Casts in C++: Static_cast"
}

void print_result(Player player_1, Player player_2) {

  // HIER programmieren:
  Result result = determine_result(player_1, player_2);
  if (result == Result::PLAYER_ONE_WINS) {
    cout << "Spieler " << player_1.name << " hat gewonnen." << endl;
  } else if (result == Result::PLAYER_TWO_WINS) {
    cout << "Spieler " << player_2.name << " hat gewonnen." << endl;
  } else {
    cout << "Unentschieden" << endl;
  }

  // Ermitteln Sie zunächst das Spielergebnis. Nutzen sie dazu die Funktion
  // determine_result. Geben Sie anschließend auf der Konsole aus, wer gewonnen
  // hat. z.B: "Spieler Computer hat gewonnen" oder "Unentschieden"
}

int main(int argc, char *argv[]) {
  Player player_1, player_2;
  player_1.name = "Computer";
  player_2.name = insert_name();
  player_1.choice = determine_choice(player_2.name);
  cout << "Der Computer hat seine Wahl getroffen." << endl;
  player_2.choice = choose();
  print_choice(player_1);
  print_choice(player_2);
  print_result(player_1, player_2);

  return 0;
}
